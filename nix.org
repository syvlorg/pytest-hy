* shell.nix

#+begin_src nix :tangle (meq/tangle-path)
with builtins; (import ./.).devShell.${builtins.currentSystem}
#+end_src

* default.nix

Adapted from [[https://github.com/edolstra/flake-compat#usage][here]]:

#+begin_src nix :tangle (meq/tangle-path)
with builtins; if (builtins ? getFlake) then (getFlake (toString ./.)) else (import fetchTarball (let
    lockExists = pathExists ./flake.lock;
    lock = if lockExists then (fromJSON (readFile ./flake.lock)) else { nodes.flake-compat.locked.rev = "master"; };
in {
    url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
    ${if lockExists then "sha256" else null} = lock.nodes.flake-compat.locked.narHash;
}) { src = ./.; }).defaultNix
#+end_src

* flake.nix

#+begin_src nix :tangle (meq/tangle-path)
{
    description = "The official hy conftest, as a pytest plugin!";
    inputs = rec {
        settings = {
            url = github:sylvorg/settings;
            inputs.py3pkg-pytest-hy.follows = "";
        };
        # nixpkgs.follows = "settings/nixpkgs";
        nixpkgs.url = github:nixos/nixpkgs/<<channel(dotted='t)>>;
        flake-utils.url = github:numtide/flake-utils;
        flake-compat = {
            url = "github:edolstra/flake-compat";
            flake = false;
        };
    };
    outputs = inputs@{ self, flake-utils, settings, ... }: with builtins; with settings.lib; with flake-utils.lib; settings.mkOutputs {
        pname = "pytest-hy";
        callPackage = { lib, buildPythonPackage, fetchFromGitHub, pythonOlder, pytest, hy, pname }: let
            owner = "syvlorg";
        in buildPythonPackage rec {
            version = "0.0.1";
            inherit pname;
            disabled = pythonOlder "3.7";
            src = ./.;
            buildInputs = [ pytest hy ];
            meta = with lib; {
                homepage = "https://github.com/${owner}/${pname}";
                description = "The official hy conftest, as a pytest plugin!";
                license = licenses.mit;
            };
        };
        type = "hy";
    };
}
#+end_src
