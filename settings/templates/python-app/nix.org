* envrc

#+begin_src shell :tangle (meq/tangle-path)
make tangle update add
nix flake info &> /dev/null && use flake --show-trace || use nix --show-trace
#+end_src

* shell.nix

#+begin_src nix :tangle (meq/tangle-path)
(import ./.).devShell.${builtins.currentSystem}
#+end_src

* default.nix

Adapted from [[https://github.com/edolstra/flake-compat#usage][here]]:

#+begin_src nix :tangle (meq/tangle-path)
with builtins; if (builtins ? getFlake) then (getFlake (toString ./.)) else (import fetchTarball (let
    lockExists = pathExists ./flake.lock;
    lock = if lockExists then (fromJSON (readFile ./flake.lock)) else { nodes.flake-compat.locked.rev = "master"; };
in {
    url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
    ${if lockExists then "sha256" else null} = lock.nodes.flake-compat.locked.narHash;
}) { src = ./.; }).defaultNix
#+end_src

* flake.nix

#+begin_src nix :tangle (meq/tangle-path)
{

    # TODO: Change this!
    description = "";

    inputs = rec {
        settings.url = github:sylvorg/settings;
        flake-utils.url = github:numtide/flake-utils;
        flake-compat = {
            url = "github:edolstra/flake-compat";
            flake = false;
        };
    };
    outputs = inputs@{ self, flake-utils, settings, ... }: with builtins; with settings.lib; with flake-utils.lib; settings.mkOutputs {
        inherit inputs;
        type = "hy";

        # TODO: Change this!
        pname = "";
        
        isApp = true;

        # TODO: Change this!
        callPackage = {}: {};
    };
}
#+end_src
